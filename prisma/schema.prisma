generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Mellow {
    id               BigInt   @id @default(1)
    model            String?  @default("gpt-3.5-turbo")
    prompt           String?  @default("You are Mellow")
    temperature      Float    @default(0.6)
    presencePenalty  Float    @default(0.6)
    frequencyPenalty Float    @default(0.5)
    maxTokens        Int      @default(300)
    enabled          Boolean  @default(true)
    checkInTools     Boolean  @default(true)
    copingTools      Boolean  @default(true)
    ghostTools       Boolean  @default(true)
    crisisTools      Boolean  @default(true)
    owners           String[]
    feedbackLogs     BigInt?
    reportLogs       BigInt?
    serverId         BigInt?
    adminId          BigInt?
    modId            BigInt?
    logId            BigInt?
}

model User {
    id                    BigInt                @id @default(autoincrement())
    username              String
    role                  Role                  @default(USER)
    createdAt             DateTime              @default(now())
    isBanned              Boolean               @default(false)
    bannedUntil           DateTime?
    banReason             String?
    history               ConversationHistory[]
    checkIns              MoodCheckIn[]
    ghostLetters          GhostLetter[]
    copingToolUsages      CopingToolUsage[]
    crisisEvents          CrisisEvent[]
    modActionsAsModerator ModAction[]           @relation("ModActionModerator")
    preferences           UserPreferences?
    feedback              Feedback[]
    reports               Report[]
    journalEntries        JournalEntry[]
    gratitudeEntries      GratitudeEntry[]
    copingPlans           CopingPlan[]
    favoriteCopingTools   FavoriteCopingTool[]
    systemLogs            SystemLog[]
    discordId             String?               @unique

    @@index([role])
    @@index([isBanned])
    @@index([createdAt])
}

model Guild {
    id                    BigInt      @id
    name                  String
    ownerId               BigInt
    joinedAt              DateTime    @default(now())
    isBanned              Boolean     @default(false)
    bannedUntil           DateTime?
    banReason             String?
    systemRoleId          String?
    systemChannelId       String?
    systemLogsEnabled     Boolean     @default(false)
    auditLogChannelId     String?
    modAlertChannelId     String?
    modLogChannelId       String?
    checkInChannelId      String?
    copingToolLogId       String?
    enableCheckIns        Boolean     @default(true)
    enableGhostLetters    Boolean     @default(true)
    enableCrisisAlerts    Boolean     @default(true)
    moderatorRoleId       String?
    autoModEnabled        Boolean     @default(false)
    autoModLevel          Int?
    language              String?     @default("en")
    disableContextLogging Boolean     @default(false)
    modActions            ModAction[]
    systemLogs            SystemLog[]
    discordId             String?     @unique

    @@index([ownerId])
    @@index([isBanned])
    @@index([joinedAt])
    @@index([language])
}

model ConversationHistory {
    id            Int      @id @default(autoincrement())
    user          User     @relation(fields: [userId], references: [id])
    userId        BigInt
    content       String
    isAiResponse  Boolean
    timestamp     DateTime @default(now())
    channelId     String?
    guildId       String?
    messageId     String?
    contextType   String   @default("conversation")
    parentId      Int?
    parent        ConversationHistory? @relation("ConversationThread", fields: [parentId], references: [id])
    replies       ConversationHistory[] @relation("ConversationThread")

    @@index([userId, timestamp])
    @@index([channelId, timestamp])
    @@index([guildId, timestamp])
    @@index([contextType, timestamp])
    @@index([messageId])
}

model MoodCheckIn {
    id          Int       @id @default(autoincrement())
    user        User      @relation(fields: [userId], references: [id])
    userId      BigInt
    mood        String
    intensity   Int?      @default(3) // 1-5 scale
    activity    String?
    note        String?
    nextCheckIn DateTime?
    createdAt   DateTime  @default(now())

    @@index([userId, createdAt])
    @@index([mood])
    @@index([nextCheckIn])
}

model GhostLetter {
    id        Int      @id @default(autoincrement())
    user      User     @relation(fields: [userId], references: [id])
    userId    BigInt
    content   String
    createdAt DateTime @default(now())

    @@index([userId, createdAt])
}

model CopingToolUsage {
    id       Int      @id @default(autoincrement())
    user     User     @relation(fields: [userId], references: [id])
    userId   BigInt
    toolName String
    usedAt   DateTime @default(now())

    @@index([userId, usedAt])
    @@index([toolName, usedAt])
}

model CrisisEvent {
    id         Int      @id @default(autoincrement())
    user       User     @relation(fields: [userId], references: [id])
    userId     BigInt
    detectedAt DateTime @default(now())
    details    String?
    escalated  Boolean  @default(false)

    @@index([userId, detectedAt])
    @@index([escalated, detectedAt])
}

model ModAction {
    id           Int      @id @default(autoincrement())
    guild        Guild    @relation(fields: [guildId], references: [id])
    guildId      BigInt
    moderator    User     @relation("ModActionModerator", fields: [moderatorId], references: [id])
    moderatorId  BigInt
    targetUserId BigInt
    action       String
    reason       String?
    roleId       BigInt?
    createdAt    DateTime @default(now())

    @@index([guildId, createdAt])
    @@index([moderatorId, createdAt])
    @@index([targetUserId, createdAt])
    @@index([action, createdAt])
}

model UserPreferences {
    id                      BigInt    @id
    user                    User      @relation(fields: [id], references: [id])
    checkInInterval         Int       @default(720)
    lastReminder            DateTime?
    nextCheckIn             DateTime?
    remindersEnabled        Boolean   @default(true)
    reminderMethod          String?   @default("dm")
    journalPrivacy          Boolean   @default(true)
    aiPersonality           String?   @default("gentle")
    profileTheme            String?   @default("blue")
    language                String?   @default("en")
    timezone                String?
    disableContextLogging   Boolean   @default(false)
    disableCrisisDetection  Boolean   @default(false)
    disableCrisisSupportDMs Boolean   @default(false)
    createdAt               DateTime  @default(now())
    updatedAt               DateTime  @updatedAt

    @@index([nextCheckIn])
    @@index([timezone])
    @@index([language])
}

model Feedback {
    id        Int      @id @default(autoincrement())
    user      User?    @relation(fields: [userId], references: [id])
    userId    BigInt?
    message   String
    createdAt DateTime @default(now())

    @@index([userId, createdAt])
}

model Report {
    id        Int      @id @default(autoincrement())
    user      User?    @relation(fields: [userId], references: [id])
    userId    BigInt?
    message   String
    createdAt DateTime @default(now())

    @@index([userId, createdAt])
}

model JournalEntry {
    id        Int      @id @default(autoincrement())
    user      User     @relation(fields: [userId], references: [id])
    userId    BigInt
    content   String
    private   Boolean  @default(true)
    createdAt DateTime @default(now())

    @@index([userId, createdAt])
    @@index([private, createdAt])
}

model GratitudeEntry {
    id        Int      @id @default(autoincrement())
    user      User     @relation(fields: [userId], references: [id])
    userId    BigInt
    item      String
    createdAt DateTime @default(now())

    @@index([userId, createdAt])
}

model CopingPlan {
    id        Int      @id @default(autoincrement())
    user      User     @relation(fields: [userId], references: [id])
    userId    BigInt
    plan      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId, updatedAt])
}

model FavoriteCopingTool {
    id     Int    @id @default(autoincrement())
    user   User   @relation(fields: [userId], references: [id])
    userId BigInt
    tool   String

    @@index([userId])
    @@index([tool])
}

model SystemLog {
    id          Int      @id @default(autoincrement())
    guildId     BigInt?  // Null for global logs (e.g., bot startup)
    userId      BigInt?  // User associated with the log event (if applicable)
    logType     String   // command, crisis, moderation, system, user, support, startup, error
    title       String   // Log event title
    description String?  // Detailed description
    metadata    String?  // JSON metadata for additional context
    severity    String   @default("info") // info, warning, error, critical
    createdAt   DateTime @default(now())
    
    // Relations
    guild       Guild?   @relation(fields: [guildId], references: [id])
    user        User?    @relation(fields: [userId], references: [id])
    
    @@index([guildId, logType, createdAt])
    @@index([userId, logType, createdAt])
    @@index([logType, createdAt])
    @@index([severity, createdAt])
}

enum Role {
    OWNER
    ADMIN
    MOD
    SUPPORT
    USER
}
